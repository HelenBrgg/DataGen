data: #handles files and their csv-subfiles that are in the 'data-directory'
  mode: seed_data #seed_data or dummy_data
  datapath: 'data'

   #looks for these csv files in the files from files directory
  csvs: ["TS-PL-20_01.csv" ,"TS-PL-20_02.csv"  , "TS-PL-20_03.csv" , "TS-PL-20_04.csv", "TS-PL-20_05.csv", "TS-PL-20_06.csv" ,"TS-PL-20_07.csv", "TS-PL-20_08.csv", "TS-PL-20_09.csv", "TS-PL-20_10.csv", "TS-PL-20_11.csv", "TS-PL-22_12.csv", "TS-PL-20_13.csv", "TS-PL-20_14.csv", "TS-PL-22_15.csv", "TS-PL-20_16.csv",
                                                     "TS-PL-21_20.csv", "TS-PL-21_21.csv", "TS-PL-21_22.csv", "TS-PL-21_22.csv", "TS-PL-21_23.csv", "TS-PL-21_24.csv", "TS-PL-21_25.csv", "TS-PL-21_26.csv", "TS-PL-21_27.csv", "TS-PL-21_28.csv", "TS-PL-21_29.csv", "TS-PL-21_30.csv", "TS-PL-21_31.csv", "TS-PL-21_32.csv","TS-PL-23_01.csv", "TS-PL-24_02.csv", "TS-PL-27_03.csv", "TS-PL-27_04.csv", "TS-PL-27_05.csv", "TS-PL-27_06.csv", "TS-PL-27_07.csv", "TS-PL-27_08.csv", "TS-PL-27_09.csv", "TS-PL-27_10.csv", "TS-PL-27_11.csv", "TS-PL-27_12.csv", "TS-PL-27_13.csv", "TS-PL-27_14.csv", "TS-PL-27_15.csv", "TS-PL-27_16.csv",
                                                   "TS-PL-27_17.csv", "TS-PL-27_18.csv", "TS-PL-27_19.csv", "TS-PL-27_20.csv", "TS-PL-27_21.csv", "TS-PL-27_22.csv", "TS-PL-22_27.csv", "TS-PL-27_23.csv", "TS-PL-27_24.csv", "TS-PL-27_25.csv", "TS-PL-27_26.csv", "TS-PL-27_27.csv", "TS-PL-27_28.csv", "TS-PL-27_29.csv", "TS-PL-27_30.csv", "TS-PL-27_31.csv", "TS-PL-27_32.csv","TS-PL-24_17.csv","TS-PL-25_11.csv","TS-PL-26_04.csv", "TS-PL-23_19.csv", "TS-PL-23_20.csv", "TS-PL-23_21.csv", "TS-PL-24_17.csv","TS-PL-26_14.csv", "TS-PL-26_15.csv","TS-PL-26_21.csv", "TS-PL-26_16.csv", "TS-PL-26_17.csv","TS-PL-22_14.csv", "TS-PL-22_15.csv",]
   
   #look for the csv files in these files
  files: ['TS-PL-20','TS-PL-21','TS-PL-27', 'TS-PL-25', 'TS-PL-24','TS-PL-22','TS-PL-23','TS-PL-26']
   #if the mode is seeddata, one can set dummy data here
  dummy: [[1, 1, 1, 1, ], [2, 2, 2, 2,],[3, 3, 3, 3], [5, 5, 5, 5,], [8, 8, 8, 8,],[9, 9,9, 9,], [10, 10, 10, 10,], [12, 12, 12, 12,], [11, 11, 11, 11,],[8, 8, 8, 8,],[7, 7, 7, 7,], [6, 6, 6, 6,] ,[5, 5, 5, 5,], [4, 4, 4, 4,],[1, 1, 1, 1, ], [2, 2, 2, 2,],[3, 3, 3, 3],[2, 2, 2, 2,],[3, 3, 3, 3]]
extend: 
  path_output: "output_data/without_profile"
  series_list:

    - series: 
      name: serieTrainNegative3Anomalies
      standardizing: #list with one scale for each column, 
                    #normalizes and scales data between min and max val, shifts to desired mean, if provided one
        - scale: #scale e.g. for columns that are wrongly calibrated
          min_val: 0
          max_val: 2   
          desired_mean: 3 # default None
          column : 3 #
        - scale:
          min_val: 0
          max_val: 0   
          desired_mean:  # default None
          column :  #"Drahtvorschub"
      baseediting:
        stretching: #stretches or shortens the data by given factor, 
        #if <1 it drops lines, else interpolates
          factor: 0.01
          method: linear #for stretching, linear or pad
          limit_direction: False # for padding
        noising: #Generate Gaussian noise with mean 0 and variance proportional to the column and that is scaled by 'factor'
          factor: 
        concatenating: # repeatedly concatenates the dataframes a given number of times, and smoothes the edges
          times:  # dataframe times+1 
          smooth_number: 1 # how many numbers left and right at the cut are being smoothed
          smooth_factor: 3
        smoothing: #reduces the noise by applying gaussian smoothing
          factor: 1.2 #a smaller number leads to less smoothing
      projections: # applies pattern and anomalies on the timeseries
              #patterns:
              # random walk: pattern, that randomly chooses steps from -1,0,1
              # sine wave
              #anomalies:
              #square shaped anomaly 
              #bell shaped
        - projection: projection1
          column: 3
          type: sine #sine or random walk 
          frequency: 0.0001 # only for sine
          amplitude:  #for random walk and sine, default for random walk is 1.5 and for sine is range of array.max()-array.min()*0.3
        - projection:
          column: 
          type: 
          frequency:  #for sine, around 0.0001
          amplitude:
      anomalies:
        - anomaly: anomaly1
          column: 3
          type: square # square or bell
          position: 80000 #middle of anomaly
          half_width: 100 # anomaly left and right of position
          height_factor: 0.5 #additional to height at position
        - anomaly: anomaly2
          column: 1
          type: bell
          position: 3000
          half_width: 400
          height_factor: -0.8
      generate:
        duration: 0 #len(Smat[1])
        substance_vals : [0, 0.09, 0.01, .8] # factors with which the features will go into the output 
        
        distribution_vals: [0, 0.1, 0.2, 0.7] #distribution width chagnes through these factors
        conesize: 400 #must be even
        output_path: output_data/with_profile
        output_path_subsampled: output_data/with_profile_subsampled
    

   